class Solution:
    def nextPermutation(self, nums):
        """
        Do not return anything, modify nums in-place instead.
        """
        if not nums:return
        j = len(nums) - 1
        while j >= 1:
            if nums[j-1] < nums[j]:
                k = j
                while k < len(nums):
                    if nums[k] <= nums[j-1]:
                        break
                    k += 1
                nums[j-1],nums[k-1] = nums[k-1],nums[j-1]
                break
            j = j-1
        nums[j:] = sorted(nums[j:])

思路:
1.先找出最大的索引 k 满足 nums[k] < nums[k+1]，如果不存在，就翻转整个数组；
2.再找出另一个最大索引 l 满足 nums[l] > nums[k]；
3.交换 nums[l] 和 nums[k]；
4.最后翻转 nums[k+1:]

举个例子：
比如 nums = [1,2,7,4,3,1]，下一个排列是什么？
我们找到第一个最大索引是 nums[1] = 2
再找到第二个最大索引是 nums[5] = 3
交换，nums = [1,3,7,4,2,1];
翻转，nums = [1,3,1,2,4,7]
完毕!
所以,
时间复杂度：O(n)
空间复杂度：O(1)
