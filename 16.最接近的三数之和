class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums = sorted(nums)         #排序的目的是为了21-26行，因为数组是排序的，所以如果target>p，就要向后移动前指针来让两者更为接近，target<p同理
                                    #前后指针避免了使用三层循环暴力枚举而导致复杂度过大，当有了前第一个数需要确定第三个数的时候，就不用再写一层循环
                                    #一个一个试了，直接根据target和p的大小关系移动指针就可以了
        dif = float('inf')          #获取一个无穷大的数
        res = 0
        l = len(nums)
        for i in range(l-2):
             if i == 0 or nums[i] > nums[i-1]:        #这个判断十分重要，能省下大量运行时间。排序过后存在连续几个数相等的，找后两个数的时候可以直
                                                      #接跳过这些重复的第一个数
                    first = i + 1
                    last = l-1
                    while first < last:
                            p = nums[i]+nums[first]+nums[last]
                            if abs(target-p) < dif:
                                    dif = abs(target-p)
                                    res = p
                            if target - p > 0:
                                  first = first + 1
                            elif target - p < 0:
                                  last = last - 1
                            else:
                                 return target
        return res
